using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.IO;
using System.Security.Cryptography;
using System.Threading;

using Endian;
using FormEssentials;

namespace LMAOSoft.Inc.Misc
{
    public static class Keys
    {
        public static byte[] XMACS_RSA_PUB2048 = new byte[] { 
            0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3D, 0xA2,
            0x69, 0x7C, 0x4E, 0xE3, 0x7C, 0x9F, 0x46, 0xA8, 0xED, 0x2C, 0x58, 0x50, 0xB7, 0x11, 0xB7, 0x01, 0x6A, 0xF4,
            0x9C, 0xAD, 0xD4, 0xBC, 0x88, 0xE2, 0x21, 0xF0, 0x7E, 0x8E, 0x9F, 0x20, 0xE3, 0xA7, 0x52, 0xB3, 0x9F, 0x90,
            0xD7, 0x4B, 0xA5, 0x19, 0xFE, 0xF6, 0xA3, 0xA1, 0xC7, 0x91, 0x1F, 0x30, 0x88, 0x22, 0x4E, 0xAE, 0x02, 0x67,
            0x0F, 0x58, 0x5F, 0xCA, 0x21, 0x93, 0x75, 0xEA, 0xC7, 0xCA, 0x20, 0x2A, 0xC8, 0x7E, 0x58, 0x41, 0xEA, 0xA5,
            0x7F, 0x91, 0x1F, 0x4D, 0xFF, 0x02, 0x24, 0xBC, 0x14, 0x85, 0xAB, 0x9D, 0x6D, 0x04, 0xA1, 0xA8, 0x91, 0xEF,
            0x6E, 0xF6, 0xD5, 0x1C, 0xFC, 0x32, 0x94, 0x54, 0x1B, 0xF2, 0xDF, 0x12, 0xDF, 0x48, 0x13, 0xF7, 0x47, 0xA7,
            0x0E, 0x40, 0xB4, 0x25, 0xC1, 0xE5, 0xAA, 0x52, 0xE8, 0xE3, 0x52, 0x4E, 0xB1, 0xC4, 0xE1, 0xBD, 0xE0, 0x1C,
            0xC8, 0xBF, 0x79, 0xEA, 0xE3, 0x48, 0x56, 0x8F, 0x2F, 0xB1, 0xC1, 0x54, 0x5F, 0x02, 0xD8, 0x8F, 0x9A, 0x5C,
            0x63, 0x90, 0xBF, 0xCF, 0x8A, 0x1D, 0xE6, 0x2D, 0x27, 0x56, 0xB3, 0x70, 0xED, 0x5B, 0x4C, 0x02, 0x11, 0xB2,
            0xF3, 0xBC, 0x45, 0xBB, 0xDA, 0xE2, 0x2C, 0x3D, 0x85, 0x06, 0xC1, 0x20, 0x27, 0xA8, 0x48, 0xA3, 0xFC, 0x89,
            0xF6, 0xCF, 0x9B, 0x63, 0xD6, 0x02, 0x96, 0x1F, 0xF3, 0xCA, 0x7F, 0x03, 0xDC, 0xC2, 0x74, 0x3F, 0x48, 0xAB,
            0xC3, 0x42, 0x21, 0xF5, 0x77, 0xD0, 0xF6, 0xA6, 0xE2, 0x8E, 0x82, 0x0B, 0xDE, 0xEE, 0x89, 0xA9, 0x89, 0xDB,
            0xBD, 0x15, 0xD5, 0xB1, 0x11, 0x8E, 0xAE, 0xD8, 0x1D, 0x63, 0x0A, 0xB9, 0xA7, 0xD1, 0x70, 0x71, 0x44, 0xF5,
            0xEB, 0x91, 0x0E, 0x4A, 0xD9, 0x19, 0xCA, 0x06, 0x3E, 0xE5, 0xF4, 0x5E, 0x96, 0x1B, 0x5D, 0xBD, 0x06, 0xDC,
            0x34, 0x42
        };
        // From here on, it's not keys, but it is premade packets to fill in :)
        public static byte[] XMACS_REQ = new byte[1171] {
            0x6A, 0x82, 0x04, 0x8F, 0x30, 0x82, 0x04, 0x8B, 0xA1, 0x03, 0x02, 0x01, 0x05, 0xA2, 0x03, 0x02, 0x01, 0x0A, 0xA3, 0x82, 0x03, 0xFE, 0x30, 0x82, 0x03,
            0xFA, 0x30, 0x82, 0x03, 0x4A, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xDB, 0xA2, 0x82, 0x03, 0x40, 0x04, 0x82, 0x03, 0x3C, 0xD0, 0x86, 0x96, 0xE7, 0xFF, 0x76,
            0xCA, 0x01, 0x9F, 0xFF, 0xB3, 0x5C, 0x57, 0xA9, 0x6D, 0x00, 0x51, 0x63, 0x11, 0x69, 0xBD, 0x6D, 0xAD, 0xE9, 0xAE, 0x05, 0xBE, 0x12, 0x70, 0x88, 0xF2,
            0x4E, 0x2B, 0x68, 0xF6, 0x18, 0x87, 0xFC, 0xB0, 0x8D, 0x19, 0xE6, 0x2A, 0x54, 0x71, 0x88, 0xF1, 0xA6, 0x29, 0x22, 0xD8, 0x97, 0x5F, 0x86, 0x82, 0x4D,
            0x14, 0x81, 0x5D, 0x57, 0x88, 0x6C, 0x30, 0x1B, 0xD9, 0x39, 0x1D, 0xC8, 0xBB, 0x89, 0x81, 0xDD, 0x96, 0x22, 0xAE, 0xB0, 0xBB, 0xCA, 0x06, 0xAB, 0xD7,
            0xFA, 0x6C, 0xAA, 0x0F, 0x26, 0x79, 0xAB, 0x34, 0x2D, 0x8A, 0xF3, 0xBE, 0x18, 0x2B, 0xEC, 0x3B, 0xBC, 0x95, 0x53, 0x4E, 0xF3, 0x81, 0x9F, 0x59, 0x46,
            0x11, 0x4F, 0x35, 0x7D, 0xC9, 0x1E, 0xDD, 0xFB, 0x10, 0x1F, 0x85, 0xC3, 0x42, 0x49, 0x1F, 0xA4, 0xD1, 0x95, 0xBA, 0xC3, 0xA2, 0xA9, 0x2C, 0xDA, 0xC6,
            0x5D, 0xDE, 0x4E, 0x37, 0xA6, 0xCB, 0x12, 0xD5, 0x9D, 0xC0, 0x43, 0x5F, 0x47, 0x70, 0xAF, 0xDB, 0x35, 0xF0, 0x19, 0xB3, 0x21, 0x42, 0x44, 0x30, 0x59,
            0xFD, 0x4D, 0x32, 0x4F, 0xC2, 0xC6, 0x14, 0x8F, 0xC3, 0x2B, 0x41, 0x16, 0x23, 0x95, 0x80, 0xAC, 0x6E, 0xD8, 0x54, 0x67, 0xF4, 0x48, 0xEA, 0x1E, 0x35,
            0x4E, 0x53, 0x76, 0xF7, 0x23, 0xBA, 0x41, 0xE9, 0x87, 0x0E, 0x0B, 0x04, 0xB4, 0xE3, 0x04, 0x13, 0xA0, 0x23, 0x0D, 0x7A, 0x5F, 0x43, 0x4D, 0x02, 0x1F,
            0x79, 0x48, 0xA7, 0x96, 0x5A, 0xF1, 0x71, 0xE6, 0xE4, 0x62, 0x75, 0x95, 0xC8, 0xBF, 0xE5, 0xD3, 0xDE, 0x5A, 0xC9, 0x3B, 0x13, 0xA8, 0xE0, 0xDB, 0xF9,
            0x94, 0xE6, 0xB4, 0xC4, 0x8A, 0x49, 0x49, 0x91, 0x07, 0xC9, 0xAE, 0x23, 0x77, 0xC8, 0x23, 0x85, 0xD0, 0x61, 0x15, 0xEF, 0x53, 0x9A, 0x08, 0xA9, 0x18,
            0x01, 0xCD, 0xDA, 0x49, 0xFF, 0x30, 0xA9, 0x21, 0x30, 0x30, 0x31, 0x38, 0x31, 0x34, 0x37, 0x37, 0x34, 0x34, 0x30, 0x37, 0x0E, 0x58, 0xCF, 0xC4, 0x1A,
            0x21, 0x48, 0x3B, 0xE5, 0x83, 0x24, 0xAC, 0x64, 0x17, 0x5C, 0xB2, 0xA8, 0xC2, 0x5F, 0xF4, 0x69, 0xC6, 0xCB, 0xCB, 0x46, 0xEC, 0x5B, 0x0D, 0x53, 0x97,
            0xD1, 0xED, 0x48, 0x7A, 0xD2, 0x34, 0xE8, 0x3B, 0xDD, 0x3B, 0xE8, 0xA1, 0xBC, 0x3B, 0xE9, 0x86, 0x94, 0xE6, 0xA5, 0xB8, 0x3E, 0xC2, 0xD9, 0x6C, 0x29,
            0xB6, 0xFF, 0x77, 0xAC, 0x79, 0x30, 0xFC, 0xC8, 0xE9, 0xB9, 0xFF, 0x76, 0x45, 0x06, 0x2F, 0x0F, 0xFD, 0x5C, 0x4B, 0xC2, 0xA3, 0x3C, 0xEA, 0xE0, 0x7C,
            0xFC, 0xDC, 0x2E, 0xF7, 0x2E, 0xC0, 0x95, 0x9A, 0x63, 0xCB, 0xA6, 0x60, 0xFE, 0x29, 0x90, 0x7D, 0xA3, 0xDE, 0xF2, 0xCD, 0xF0, 0xE4, 0x55, 0x5B, 0x8F,
            0xDD, 0xC5, 0xFD, 0xBC, 0xAA, 0xDD, 0x1F, 0x2F, 0xA7, 0x04, 0x9E, 0x58, 0x2D, 0xF3, 0xD6, 0x25, 0x9E, 0x55, 0xFC, 0x45, 0x9A, 0x3C, 0x38, 0x01, 0xA8,
            0x0A, 0x2E, 0x04, 0x58, 0xF3, 0x58, 0x38, 0x31, 0x34, 0x35, 0x37, 0x33, 0x2D, 0x30, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x31, 0x30, 0x2D, 0x32, 0x37, 0x2D, 0x30, 0x37, 0x00, 0x01, 0x00, 0x01, 0x30, 0x1A, 0xC2, 0xB8, 0xBE, 0xBB, 0x8A, 0x6D, 0xA0, 0x19, 0x93, 0x2C,
            0x5D, 0x41, 0x88, 0x1C, 0xBA, 0x4B, 0x13, 0xFC, 0x12, 0x2F, 0xE6, 0xED, 0x87, 0xBF, 0x87, 0x31, 0x0E, 0xB9, 0x3F, 0x3D, 0xD7, 0x30, 0xC8, 0x7D, 0x20,
            0xC3, 0x8F, 0x8A, 0xBC, 0x2A, 0x9E, 0x84, 0x7E, 0x93, 0x20, 0xA8, 0x2F, 0xAD, 0xEE, 0x4F, 0x27, 0x5E, 0x37, 0x23, 0xAB, 0x8C, 0xA5, 0xF6, 0xE3, 0x77,
            0x84, 0xD1, 0x26, 0x89, 0xD8, 0x66, 0x9C, 0x8D, 0x98, 0xD5, 0xA9, 0xC1, 0xA9, 0xE5, 0xAB, 0x06, 0xE6, 0xB0, 0xB1, 0xDD, 0x05, 0x64, 0xC3, 0xE9, 0x26,
            0xE7, 0x55, 0x35, 0x25, 0x32, 0x70, 0xC4, 0x2C, 0x67, 0x69, 0x59, 0xA6, 0xD7, 0xE4, 0x98, 0x4B, 0xC9, 0xA4, 0x09, 0x62, 0x4C, 0xF1, 0x3F, 0x03, 0x62,
            0x21, 0x2A, 0x11, 0xAA, 0x91, 0x94, 0x7D, 0x0E, 0xD7, 0xBF, 0xCC, 0x6D, 0xFE, 0x1B, 0x62, 0xBD, 0x2D, 0x44, 0x80, 0xDA, 0xB5, 0x7F, 0x3D, 0xC2, 0x3D,
            0x83, 0x30, 0x8B, 0xEC, 0x2B, 0xCC, 0x53, 0xCB, 0x60, 0xCF, 0x39, 0xA8, 0xD9, 0x7C, 0x7C, 0x4F, 0xBB, 0x25, 0xCD, 0x36, 0x63, 0x55, 0x70, 0x57, 0x56,
            0xA1, 0xC4, 0x31, 0x13, 0x7D, 0x70, 0xBA, 0x40, 0x5E, 0x3B, 0x99, 0xF9, 0x14, 0x0C, 0x49, 0xBE, 0x66, 0x66, 0xD1, 0x31, 0x14, 0x22, 0x0D, 0x41, 0xD4,
            0x0F, 0xD8, 0x39, 0xF8, 0x0B, 0xF2, 0x05, 0xBD, 0x48, 0x6F, 0x3B, 0x32, 0x93, 0x8E, 0x4A, 0x3F, 0x85, 0xC5, 0xD5, 0x16, 0x7F, 0x6A, 0x91, 0xD1, 0xF1,
            0x96, 0xB8, 0xF4, 0xEC, 0x5E, 0x8B, 0x8F, 0x41, 0x5A, 0x7A, 0xAA, 0xB4, 0x2A, 0x13, 0x56, 0xC3, 0x5B, 0xBE, 0x67, 0x27, 0x17, 0x84, 0x07, 0x94, 0xEA,
            0xB7, 0xFC, 0xE0, 0xB9, 0xD9, 0xD2, 0x12, 0xE6, 0xCB, 0x1F, 0x8D, 0xF8, 0x5F, 0x2B, 0xE3, 0x89, 0x8F, 0xD5, 0x88, 0x1D, 0x0E, 0xC1, 0x05, 0x86, 0x0C,
            0xD6, 0x82, 0x19, 0x4A, 0x82, 0x8F, 0x70, 0x8D, 0x78, 0x08, 0x6F, 0x21, 0x32, 0x8C, 0xF6, 0xDC, 0x8F, 0xB6, 0x77, 0x1E, 0x09, 0xC8, 0x99, 0x6B, 0x23,
            0x1B, 0x14, 0x95, 0xEA, 0x4F, 0xFB, 0x34, 0xFE, 0x32, 0x34, 0x8A, 0xAF, 0x85, 0x03, 0x3D, 0xF4, 0xA4, 0x0B, 0xF1, 0x85, 0x33, 0x13, 0x28, 0x4B, 0x10,
            0x4C, 0xC0, 0x66, 0xCF, 0x94, 0xC5, 0x4E, 0xBB, 0x72, 0xC5, 0x33, 0xA6, 0x9C, 0xC7, 0xEB, 0x9E, 0x29, 0x7F, 0x15, 0x38, 0x79, 0x5F, 0x1B, 0x80, 0xA6,
            0xAF, 0xDB, 0xB0, 0x15, 0x9C, 0x53, 0xDA, 0x4C, 0xE5, 0xE8, 0xD8, 0xBD, 0x24, 0x4E, 0xE3, 0xDC, 0xE0, 0x56, 0xA4, 0xC4, 0x03, 0xA2, 0x71, 0x07, 0xCC,
            0x60, 0xE9, 0x68, 0xB1, 0x2E, 0x87, 0x03, 0x84, 0x2E, 0x03, 0x50, 0x11, 0xA7, 0xBE, 0x22, 0x2D, 0xDD, 0xCD, 0x27, 0xC2, 0xFC, 0x8A, 0x30, 0x60, 0xA1,
            0x04, 0x02, 0x02, 0x00, 0xCE, 0xA2, 0x58, 0x04, 0x56, 0x8A, 0x11, 0x79, 0x83, 0x72, 0x3A, 0xF3, 0xAD, 0x8F, 0x31, 0x82, 0x6A, 0xDE, 0x36, 0x69, 0xE4,
            0x77, 0x72, 0xF9, 0x8F, 0x58, 0x62, 0x6F, 0x78, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x32, 0x2E, 0x30, 0x30, 0x2E, 0x31, 0x36, 0x37,
            0x34, 0x37, 0x2E, 0x30, 0x20, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3D, 0x30, 0x78, 0x46, 0x46, 0x46, 0x45, 0x30, 0x37, 0x44, 0x31, 0x20, 0x54, 0x69, 0x74,
            0x6C, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x35, 0x34, 0x31, 0x30, 0x31, 0x38, 0x36, 0x32, 0x34, 0x00, 0x30, 0x48, 0xA1, 0x03, 0x02,
            0x01, 0x02, 0xA2, 0x41, 0x04, 0x3F, 0x30, 0x3D, 0xA0, 0x03, 0x02, 0x01, 0x17, 0xA2, 0x36, 0x04, 0x34, 0x3C, 0x26, 0xE7, 0x32, 0x95, 0x44, 0x31, 0x2E,
            0x44, 0xF5, 0x9B, 0x5F, 0x3C, 0x29, 0x63, 0xF2, 0x77, 0xF4, 0xF6, 0x59, 0x66, 0x7F, 0xD2, 0x14, 0x25, 0xBD, 0x62, 0x4E, 0xB5, 0x70, 0xE0, 0xC1, 0x15,
            0xBF, 0xB4, 0x19, 0x5C, 0xC4, 0x51, 0x20, 0x6A, 0xCE, 0xF9, 0x01, 0x43, 0x8E, 0x60, 0x9B, 0x68, 0xA3, 0x1F, 0x14, 0xA4, 0x7D, 0x30, 0x7B, 0xA0, 0x07,
            0x03, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0xA1, 0x1C, 0x30, 0x1A, 0xA0, 0x03, 0x02, 0x01, 0x0A, 0xA1, 0x13, 0x30, 0x11, 0x1B, 0x0F, 0x58, 0x45, 0x2E,
            0x30, 0x32, 0x37, 0x33, 0x32, 0x36, 0x30, 0x36, 0x38, 0x36, 0x33, 0x33, 0xA2, 0x0F, 0x1B, 0x0D, 0x4D, 0x41, 0x43, 0x53, 0x2E, 0x58, 0x42, 0x4F, 0x58,
            0x2E, 0x43, 0x4F, 0x4D, 0xA3, 0x22, 0x30, 0x20, 0xA0, 0x03, 0x02, 0x01, 0x02, 0xA1, 0x19, 0x30, 0x17, 0x1B, 0x06, 0x6B, 0x72, 0x62, 0x74, 0x67, 0x74,
            0x1B, 0x0D, 0x4D, 0x41, 0x43, 0x53, 0x2E, 0x58, 0x42, 0x4F, 0x58, 0x2E, 0x43, 0x4F, 0x4D, 0xA5, 0x11, 0x18, 0x0F, 0x32, 0x30, 0x33, 0x37, 0x30, 0x39,
            0x31, 0x33, 0x30, 0x32, 0x34, 0x38, 0x30, 0x35, 0x5A, 0xA7, 0x03, 0x02, 0x01, 0x00, 0xA8, 0x05, 0x30, 0x03, 0x02, 0x01, 0x17
        };

        public static byte[] APReq1 = new byte[363] { // 0x6A - 0x6E = Xbox Version
            0x6A, 0x82, 0x01, 0x67, 0x30, 0x82, 0x01, 0x63, 0xA1, 0x03, 0x02, 0x01, 0x05, 0xA2, 0x03, 0x02, 0x01, 0x0A, 0xA3, 0x81, 0xCF, 0x30, 0x81, 0xCC, 0x30, 
            0x1E, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xD8, 0xA2, 0x16, 0x04, 0x14, 0x8E, 0x02, 0x46, 0x1B, 0x52, 0x8F, 0xB1, 0xCD, 0xA5, 0x51, 0x01, 0x29, 0x39, 0x85, 
            0xB3, 0xE5, 0x5A, 0xCD, 0xE4, 0xC5, 0x30, 0x60, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xCE, 0xA2, 0x58, 0x04, 0x56, 0x31, 0x08, 0x62, 0x4F, 0x80, 0xE9, 0x87, 
            0x05, 0xAF, 0xA2, 0xCB, 0xB1, 0x27, 0x1A, 0xCD, 0x9B, 0xFD, 0x21, 0x01, 0x30, 0x58, 0x62, 0x6F, 0x78, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 
            0x3D, 0x32, 0x2E, 0x30, 0x30, 0x2E, 0x31, 0x37, 0x35, 0x31, 0x31, 0x2E, 0x30, 0x20, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3D, 0x30, 0x78, 0x46, 0x46, 0x46, 
            0x45, 0x30, 0x37, 0x44, 0x31, 0x20, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x35, 0x34, 0x31, 0x30, 0x31, 0x38, 
            0x36, 0x32, 0x34, 0x00, 0x30, 0x48, 0xA1, 0x03, 0x02, 0x01, 0x02, 0xA2, 0x41, 0x04, 0x3F, 0x30, 0x3D, 0xA0, 0x03, 0x02, 0x01, 0x17, 0xA2, 0x36, 0x04, 
            0x34, 0x28, 0xAC, 0x88, 0x78, 0x9B, 0xAD, 0x84, 0xA5, 0xEF, 0x6E, 0x07, 0xE2, 0x1D, 0xC4, 0x8D, 0x71, 0xF1, 0x25, 0x34, 0x86, 0x58, 0x6F, 0xB5, 0x0E, 
            0x4E, 0x37, 0xE9, 0xF2, 0xE4, 0x2A, 0x00, 0x98, 0xA3, 0x95, 0xDD, 0x96, 0x4F, 0xAE, 0x7D, 0x93, 0x78, 0xD7, 0x44, 0x9C, 0xCC, 0x2D, 0x54, 0x94, 0x45, 
            0xD1, 0x54, 0xDB, 0xA4, 0x81, 0x84, 0x30, 0x81, 0x81, 0xA0, 0x07, 0x03, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0xA1, 0x25, 0x30, 0x23, 0xA0, 0x03, 0x02, 
            0x01, 0x0A, 0xA1, 0x1C, 0x30, 0x1A, 0x1B, 0x18, 0x58, 0x45, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x31, 0x35, 0x32, 0x38, 0x38, 0x30, 0x37, 0x33, 0x40, 0x78, 
            0x62, 0x6F, 0x78, 0x2E, 0x63, 0x6F, 0x6D, 0xA2, 0x0E, 0x1B, 0x0C, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4F, 0x52, 0x54, 0x2E, 0x4E, 0x45, 0x54, 0xA3, 0x1D, 
            0x30, 0x1B, 0xA0, 0x03, 0x02, 0x01, 0x02, 0xA1, 0x14, 0x30, 0x12, 0x1B, 0x06, 0x6B, 0x72, 0x62, 0x74, 0x67, 0x74, 0x1B, 0x08, 0x58, 0x42, 0x4F, 0x58, 
            0x2E, 0x43, 0x4F, 0x4D, 0xA5, 0x11, 0x18, 0x0F, 0x32, 0x30, 0x33, 0x37, 0x30, 0x39, 0x31, 0x33, 0x30, 0x32, 0x34, 0x38, 0x30, 0x35, 0x5A, 0xA7, 0x06, 
            0x02, 0x04, 0xF2, 0x06, 0xC4, 0x3C, 0xA8, 0x05, 0x30, 0x03, 0x02, 0x01, 0x17
        };

        public static byte[] APReq2 = new byte[391] { // 0x86 - 0x8A = Xbox Version
            0x6A, 0x82, 0x01, 0x83, 0x30, 0x82, 0x01, 0x7F, 0xA1, 0x03, 0x02, 0x01, 0x05, 0xA2, 0x03, 0x02, 0x01, 0x0A, 0xA3, 0x81, 0xEB, 0x30, 0x81, 0xE8, 0x30,
            0x1E, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xD8, 0xA2, 0x16, 0x04, 0x14, 0x8E, 0x02, 0x46, 0x1B, 0x52, 0x8F, 0xB1, 0xCD, 0xA5, 0x51, 0x01, 0x29, 0x39, 0x85,
            0xB3, 0xE5, 0x5A, 0xCD, 0xE4, 0xC5, 0x30, 0x1A, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xCD, 0xA2, 0x12, 0x04, 0x10, 0x77, 0x8D, 0xAA, 0xD1, 0xB9, 0xAA, 0x8F,
            0x18, 0xDF, 0xC7, 0x15, 0x45, 0x91, 0x18, 0x3D, 0xA3, 0x30, 0x60, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xCE, 0xA2, 0x58, 0x04, 0x56, 0x31, 0x08, 0x62, 0x4F,
            0x80, 0xE9, 0x87, 0x05, 0xAF, 0xA2, 0xCB, 0xB1, 0x27, 0x1A, 0xCD, 0x9B, 0xFD, 0x21, 0x01, 0x30, 0x58, 0x62, 0x6F, 0x78, 0x20, 0x56, 0x65, 0x72, 0x73,
            0x69, 0x6F, 0x6E, 0x3D, 0x32, 0x2E, 0x30, 0x30, 0x2E, 0x31, 0x37, 0x35, 0x31, 0x31, 0x2E, 0x30, 0x20, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3D, 0x30, 0x78,
            0x46, 0x46, 0x46, 0x45, 0x30, 0x37, 0x44, 0x31, 0x20, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x35, 0x34, 0x31,
            0x30, 0x31, 0x38, 0x36, 0x32, 0x34, 0x00, 0x30, 0x48, 0xA1, 0x03, 0x02, 0x01, 0x02, 0xA2, 0x41, 0x04, 0x3F, 0x30, 0x3D, 0xA0, 0x03, 0x02, 0x01, 0x17,
            0xA2, 0x36, 0x04, 0x34, 0xA0, 0xF2, 0x47, 0x3F, 0xF0, 0x79, 0x5B, 0xD4, 0x43, 0x39, 0x71, 0x43, 0xCD, 0xE2, 0xE1, 0x6A, 0x67, 0x1E, 0xD9, 0x60, 0x34,
            0x6C, 0x41, 0x9F, 0x3A, 0xB3, 0x32, 0xBF, 0x30, 0x56, 0x57, 0xC2, 0xA4, 0x41, 0x93, 0x48, 0x2E, 0x42, 0x96, 0x66, 0x94, 0x38, 0x5E, 0x22, 0x93, 0x45,
            0x72, 0xD4, 0xE2, 0x42, 0x68, 0xA4, 0xA4, 0x81, 0x84, 0x30, 0x81, 0x81, 0xA0, 0x07, 0x03, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0xA1, 0x25, 0x30, 0x23,
            0xA0, 0x03, 0x02, 0x01, 0x0A, 0xA1, 0x1C, 0x30, 0x1A, 0x1B, 0x18, 0x58, 0x45, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x31, 0x35, 0x32, 0x38, 0x38, 0x30, 0x37,
            0x33, 0x40, 0x78, 0x62, 0x6F, 0x78, 0x2E, 0x63, 0x6F, 0x6D, 0xA2, 0x0E, 0x1B, 0x0C, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4F, 0x52, 0x54, 0x2E, 0x4E, 0x45,
            0x54, 0xA3, 0x1D, 0x30, 0x1B, 0xA0, 0x03, 0x02, 0x01, 0x02, 0xA1, 0x14, 0x30, 0x12, 0x1B, 0x06, 0x6B, 0x72, 0x62, 0x74, 0x67, 0x74, 0x1B, 0x08, 0x58,
            0x42, 0x4F, 0x58, 0x2E, 0x43, 0x4F, 0x4D, 0xA5, 0x11, 0x18, 0x0F, 0x32, 0x30, 0x33, 0x37, 0x30, 0x39, 0x31, 0x33, 0x30, 0x32, 0x34, 0x38, 0x30, 0x35,
            0x5A, 0xA7, 0x06, 0x02, 0x04, 0x52, 0x58, 0x1D, 0x36, 0xA8, 0x05, 0x30, 0x03, 0x02, 0x01, 0x17
        };

        public static byte[] TGSReq = new byte[1029] {
            0x6C, 0x82, 0x04, 0x01, 0x30, 0x82, 0x03, 0xFD, 0xA1, 0x03, 0x02, 0x01, 0x05, 0xA2, 0x03, 0x02, 0x01, 0x0C, 0xA3, 0x82, 0x03, 0xA2, 0x30, 0x82, 0x03,
            0x9E, 0x30, 0x81, 0xB0, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xD6, 0xA2, 0x81, 0xA7, 0x04, 0x81, 0xA4, 0x30, 0x81, 0xA1, 0xA0, 0x03, 0x02, 0x01, 0x17, 0xA2,
            0x81, 0x99, 0x04, 0x81, 0x96, 0x86, 0x4F, 0xB9, 0x94, 0x5F, 0xA3, 0x09, 0x8E, 0xB7, 0xA8, 0xC5, 0xF0, 0xEE, 0x00, 0x4C, 0x7F, 0xE5, 0x78, 0x9A, 0x9F,
            0x12, 0x8A, 0xF8, 0x07, 0xB0, 0xBD, 0x98, 0xE7, 0xEA, 0x03, 0x08, 0x90, 0x5E, 0x24, 0xC3, 0x56, 0x71, 0x5E, 0x77, 0x40, 0x34, 0xB3, 0x2B, 0xE1, 0x19,
            0x45, 0x44, 0x9C, 0x9F, 0x14, 0x26, 0xC1, 0x6D, 0x83, 0xFD, 0xBF, 0xE5, 0xC4, 0xFB, 0xEB, 0x54, 0x6D, 0x15, 0x71, 0x1B, 0x86, 0xE0, 0xE6, 0xA3, 0x01,
            0x76, 0xE4, 0x9B, 0xBC, 0x0A, 0x28, 0x7C, 0x03, 0x42, 0x7A, 0x99, 0x1F, 0xF0, 0x54, 0x52, 0x2B, 0xEE, 0x05, 0x7A, 0xA3, 0xD4, 0xDD, 0xDD, 0xFD, 0xC9,
            0xD9, 0x27, 0x7A, 0xAC, 0x87, 0x7B, 0x80, 0x4D, 0x13, 0x48, 0xF1, 0x0A, 0xE4, 0xDA, 0xAB, 0xAA, 0x67, 0x8F, 0x71, 0x26, 0xD3, 0x37, 0x73, 0x1F, 0x6F,
            0xE8, 0xB2, 0x81, 0xCC, 0x64, 0xC4, 0xAA, 0x24, 0x3E, 0xC8, 0x6D, 0xD5, 0xB4, 0x0B, 0x7B, 0xAA, 0x1F, 0x89, 0x9C, 0xCC, 0xB0, 0xFF, 0xC1, 0x3B, 0xB4,
            0xD2, 0x6D, 0x70, 0x5B, 0x2C, 0x30, 0x60, 0xA1, 0x04, 0x02, 0x02, 0x00, 0xCE, 0xA2, 0x58, 0x04, 0x56, 0xB4, 0x83, 0x2C, 0x88, 0x7A, 0x0E, 0xAA, 0x3A,
            0x6A, 0xAA, 0x45, 0xDF, 0x8F, 0xF7, 0x61, 0x85, 0xF5, 0x95, 0xDE, 0x54, 0x58, 0x62, 0x6F, 0x78, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D,
            0x32, 0x2E, 0x30, 0x30, 0x2E, 0x31, 0x37, 0x35, 0x31, 0x31, 0x2E, 0x30, 0x20, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3D, 0x30, 0x78, 0x46, 0x46, 0x46, 0x45,
            0x30, 0x37, 0x44, 0x31, 0x20, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x35, 0x34, 0x31, 0x30, 0x31, 0x38, 0x36,
            0x32, 0x34, 0x00, 0x30, 0x82, 0x02, 0x85, 0xA1, 0x03, 0x02, 0x01, 0x01, 0xA2, 0x82, 0x02, 0x7C, 0x04, 0x82, 0x02, 0x78, 0x6E, 0x82, 0x02, 0x74, 0x30,
            0x82, 0x02, 0x70, 0xA0, 0x03, 0x02, 0x01, 0x05, 0xA1, 0x03, 0x02, 0x01, 0x0E, 0xA2, 0x07, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x82, 0x01,
            0xAF, 0x61, 0x82, 0x01, 0xAB, 0x30, 0x82, 0x01, 0xA7, 0xA0, 0x03, 0x02, 0x01, 0x05, 0xA1, 0x0E, 0x1B, 0x0C, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4F, 0x52,
            0x54, 0x2E, 0x4E, 0x45, 0x54, 0xA2, 0x1D, 0x30, 0x1B, 0xA0, 0x03, 0x02, 0x01, 0x02, 0xA1, 0x14, 0x30, 0x12, 0x1B, 0x06, 0x6B, 0x72, 0x62, 0x74, 0x67,
            0x74, 0x1B, 0x08, 0x58, 0x42, 0x4F, 0x58, 0x2E, 0x43, 0x4F, 0x4D, 0xA3, 0x82, 0x01, 0x6F, 0x30, 0x82, 0x01, 0x6B, 0xA0, 0x03, 0x02, 0x01, 0x17, 0xA1,
            0x03, 0x02, 0x01, 0x01, 0xA2, 0x82, 0x01, 0x5D, 0x04, 0x82, 0x01, 0x59, 0x16, 0xC9, 0x59, 0x9F, 0x36, 0x2D, 0x53, 0x75, 0x3D, 0x3E, 0xF4, 0x7C, 0xD2,
            0x78, 0x5F, 0xF5, 0xDC, 0xAB, 0xE0, 0x6F, 0xFD, 0x07, 0xEC, 0xD6, 0x30, 0x6D, 0x97, 0x46, 0x41, 0xCD, 0x04, 0xD4, 0x9E, 0x08, 0xAC, 0xC4, 0xA6, 0x37,
            0xCC, 0x0F, 0xA8, 0x58, 0x9D, 0x08, 0x1F, 0x0A, 0x26, 0x83, 0x9E, 0x60, 0x43, 0xD1, 0xB0, 0x09, 0x2A, 0x80, 0xB7, 0xF4, 0xDB, 0xAB, 0xFF, 0x72, 0x2E,
            0x9C, 0xD3, 0x05, 0x32, 0x7E, 0x41, 0xE3, 0xEF, 0xB0, 0xA2, 0x17, 0x03, 0x71, 0xE6, 0x5B, 0x57, 0xCD, 0xB3, 0xB6, 0xF6, 0x74, 0x85, 0x46, 0xF4, 0xE3,
            0xCA, 0x2A, 0x6B, 0x2A, 0x6F, 0xBA, 0xDB, 0x4C, 0x35, 0x31, 0x79, 0x66, 0x7A, 0xCF, 0xBF, 0xA1, 0x8D, 0x90, 0x7A, 0x5C, 0x33, 0x9C, 0x0E, 0x6C, 0x86,
            0x43, 0x61, 0x2C, 0xF4, 0xB5, 0x11, 0xB2, 0x23, 0xC4, 0x0C, 0x37, 0xDA, 0xFC, 0x10, 0x5A, 0xF1, 0xEF, 0x92, 0xC8, 0x41, 0x7B, 0xDD, 0x8D, 0xCF, 0xE6,
            0x39, 0xC3, 0xF8, 0xC6, 0x1F, 0x11, 0xE6, 0xF1, 0xF3, 0x45, 0x74, 0x38, 0xEC, 0xDE, 0x5B, 0x12, 0x0C, 0xAE, 0x5F, 0x30, 0x95, 0x38, 0xBF, 0x56, 0x07,
            0xAF, 0x0F, 0x10, 0xD6, 0x97, 0x13, 0x04, 0xD3, 0x51, 0x32, 0x86, 0x2A, 0x32, 0x90, 0xBD, 0xBE, 0x45, 0xF1, 0x8D, 0xF0, 0x29, 0x52, 0x17, 0xFE, 0xDF,
            0xEF, 0x58, 0xF0, 0x42, 0x60, 0xE8, 0x22, 0xAB, 0xBD, 0x6E, 0x40, 0x73, 0x91, 0xEC, 0x19, 0x45, 0xC6, 0x1E, 0x33, 0x79, 0x5D, 0x87, 0xD2, 0xEB, 0x3C,
            0x3B, 0x1A, 0x3B, 0xB0, 0x39, 0x4C, 0xDF, 0x5B, 0x92, 0x2E, 0x72, 0xF5, 0x91, 0x34, 0x33, 0xA2, 0x8F, 0x36, 0x32, 0x94, 0x01, 0xFA, 0xB2, 0x2A, 0x23,
            0xD9, 0xAA, 0x29, 0x91, 0x90, 0x4D, 0xCC, 0x5B, 0xD8, 0xDD, 0x40, 0x44, 0x4A, 0x26, 0x63, 0xB2, 0x9D, 0x5E, 0x30, 0x80, 0x0F, 0x0F, 0xB0, 0x01, 0xC1,
            0x1F, 0x38, 0x6D, 0x1C, 0x35, 0xDE, 0xE0, 0x06, 0x07, 0xC2, 0x89, 0xC7, 0x6E, 0xE7, 0x86, 0x20, 0x1C, 0x99, 0x63, 0x4E, 0x90, 0xF1, 0x4A, 0xFF, 0x30,
            0x05, 0xD1, 0x6E, 0x1C, 0xEE, 0xBE, 0xFC, 0x5D, 0x5D, 0x66, 0xEF, 0x9F, 0x81, 0x7A, 0x16, 0x50, 0x5D, 0x9D, 0xB7, 0x0F, 0xDD, 0x3F, 0x3D, 0x4E, 0x73,
            0x58, 0xE4, 0xC2, 0x7B, 0x16, 0x5F, 0x01, 0xA1, 0x27, 0x4C, 0x4A, 0xF8, 0xFA, 0x38, 0x87, 0x8A, 0x9E, 0x2B, 0x7B, 0x3B, 0xCF, 0x54, 0x39, 0xBC, 0x5C,
            0x71, 0x36, 0x65, 0x19, 0xCA, 0x95, 0x53, 0xA4, 0x81, 0xA7, 0x30, 0x81, 0xA4, 0xA0, 0x03, 0x02, 0x01, 0x17, 0xA2, 0x81, 0x9C, 0x04, 0x81, 0x99, 0x3E,
            0xBF, 0x7A, 0x3B, 0x96, 0xEE, 0x16, 0x61, 0xCB, 0xFF, 0xE5, 0x7F, 0xC7, 0x67, 0xDD, 0xC6, 0x69, 0x94, 0x8D, 0x58, 0x73, 0x1E, 0x5B, 0x13, 0x00, 0x7C,
            0x4C, 0xFA, 0x11, 0xAC, 0x72, 0x66, 0xC6, 0x84, 0x9F, 0x84, 0x9F, 0xCC, 0xE7, 0xAB, 0xFD, 0xE9, 0xD9, 0xAF, 0xB7, 0xC3, 0xAF, 0xB4, 0x6B, 0xB9, 0x62,
            0x92, 0x7C, 0x59, 0x53, 0xF6, 0x99, 0x45, 0xD5, 0x21, 0x1F, 0x55, 0x56, 0x6B, 0xFE, 0xA4, 0x68, 0xE4, 0x6E, 0x9C, 0x0C, 0xE8, 0xB6, 0xB7, 0x8B, 0xD3,
            0x32, 0x86, 0xD7, 0x5A, 0x7D, 0x27, 0x23, 0x35, 0x9F, 0xB6, 0x16, 0xA7, 0x39, 0xDC, 0x82, 0x6A, 0x8A, 0x21, 0x8A, 0xE0, 0x89, 0x48, 0x04, 0x95, 0x9D,
            0x73, 0x1C, 0xF1, 0x85, 0xE4, 0x18, 0xE9, 0x9E, 0xFD, 0x1E, 0xD6, 0x6A, 0xA2, 0xC6, 0xEC, 0x13, 0xFC, 0x67, 0x76, 0xE5, 0x2D, 0x16, 0xA4, 0x86, 0x9C,
            0x07, 0x30, 0xBF, 0x19, 0xF0, 0x1B, 0x61, 0x4E, 0xF7, 0xC5, 0xDC, 0xD2, 0xD2, 0xBF, 0x36, 0x8E, 0x2B, 0x3A, 0x8A, 0xC3, 0x7F, 0x74, 0x7D, 0xB7, 0x3A,
            0xCC, 0x8E, 0xA4, 0x4B, 0x30, 0x49, 0xA0, 0x07, 0x03, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0xA2, 0x0A, 0x1B, 0x08, 0x58, 0x42, 0x4F, 0x58, 0x2E, 0x43,
            0x4F, 0x4D, 0xA3, 0x13, 0x30, 0x11, 0xA0, 0x03, 0x02, 0x01, 0x02, 0xA1, 0x0A, 0x30, 0x08, 0x1B, 0x02, 0x73, 0x67, 0x1B, 0x02, 0x53, 0x30, 0xA5, 0x11,
            0x18, 0x0F, 0x32, 0x30, 0x33, 0x37, 0x30, 0x39, 0x31, 0x33, 0x30, 0x32, 0x34, 0x38, 0x30, 0x35, 0x5A, 0xA7, 0x03, 0x02, 0x01, 0x00, 0xA8, 0x05, 0x30,
            0x03, 0x02, 0x01, 0x17
        };

        public static byte[] Authenticator = new byte[129] {
            0x62, 0x7F, 0x30, 0x7D, 0xA0, 0x03, 0x02, 0x01, 0x05, 0xA1, 0x0E, 0x1B, 0x0C, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4F, 0x52, 0x54, 0x2E, 0x4E, 0x45, 0x54,
            0xA2, 0x2A, 0x30, 0x28, 0xA0, 0x03, 0x02, 0x01, 0x02, 0xA1, 0x21, 0x30, 0x1F, 0x1B, 0x0F, 0x58, 0x45, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x31, 0x35, 0x32,
            0x38, 0x38, 0x30, 0x37, 0x33, 0x1B, 0x0C, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4F, 0x52, 0x54, 0x2E, 0x4E, 0x45, 0x54, 0xA3, 0x1B, 0x30, 0x19, 0xA0, 0x03,
            0x02, 0x01, 0x07, 0xA1, 0x12, 0x04, 0x10, 0x57, 0x13, 0xB8, 0xFF, 0x84, 0xE1, 0xAC, 0x48, 0x0E, 0x8F, 0x13, 0x89, 0xD7, 0x51, 0x2F, 0x7C, 0xA4, 0x05,
            0x02, 0x03, 0x09, 0x5E, 0xD7, 0xA5, 0x11, 0x18, 0x0F, 0x32, 0x30, 0x31, 0x32, 0x31, 0x32, 0x31, 0x33, 0x32, 0x32, 0x34, 0x33, 0x31, 0x33, 0x5A, 0xA7,
            0x03, 0x02, 0x01, 0x00
        };

        public static byte[] ServiceReq = new byte[126] {
            0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x4A, 0x3F, 0x00, 0x00, 0x00, 0x4A, 0x3F, 0x20, 0xD1, 0x07, 0xFE, 0xFF, 0x00, 0x4A, 0x3F, 0x20, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00
        };
    }

    public class XKA
    {
        public struct KVInfo
        {
            public string
                Location,
                MD5,
                Serial,
                LastLog,
                ZStatus;
            public bool Banned;
        }

        public List<KVInfo> KVs = new List<KVInfo>();

        public void AddKV(string Location)
        {
            if (File.Exists(Location)) {
                Hashing.MD5(File.ReadAllBytes(Location));
            } else { throw new Exception("File doesn't exist."); }
        }

        public void CheckKV(KVInfo KVI)
        {
            byte[] XMACsLogonKey = null;
            for (int i = 0; i < 2; i++) {
                XMACsLogonKey = GetXMACsLogonKey(KVI);
                KVI.LastLog = "Getting XMACsLogonKey... Try "+i.ToString()+"/2";
                if (XMACsLogonKey != null)
                    break;
                if (i >= 2 && XMACsLogonKey == null) {
                    KVI.LastLog = "Failed to get XMACs... Skipping.";
                    return;
                }
            }

            byte[] ConsoleID = FileEx.ReadBytes(KVI.Location, 0x9CA, 5);
            byte[] SourceArray = SHA1.Create().ComputeHash(FileEx.ReadBytes(KVI.Location, 0x9C8, 0xA8));
            byte[] Destination = Keys.APReq1;
            byte[] ClientName = ComputeClientName(ConsoleID);
            KVI.LastLog = "Creating Kerberos AS-REQ...";

            Array.Copy(ClientName, 0, Destination, 0x102, 0x18);
            Array.Copy(SourceArray, 0, Destination, 0x24, 20);

            byte[] TimeStamp = GenerateTimeStamp();

            Array.Copy(RC4HMACEncrypt(XMACsLogonKey, 0x10, ClientName, ClientName.Length, 1), 0, Destination, 0xB0, 0x34);

            UdpClient Client = new UdpClient();
            Client.Connect("XEAS.gtm.XBOXLIVE.COM", 0x58);
            Client.Send(Destination, Destination.Length);

            KVI.LastLog = "Sending Kerberos AS-REQ...";

            IPEndPoint RemoteEP = new IPEndPoint(0L, 0);

            byte[] ResponseBuff = null;
            try {
                for (int i = 0; i < 2; i++) {
                    Thread.Sleep(10);
                    if (Client.Available > 0) {
                        ResponseBuff = Client.Receive(ref RemoteEP);
                        break;
                    } else {
                        if (i >= 2) {
                            KVI.LastLog = "Couldn't get response from M$! Shitting myself...";
                            return;
                        } else Client.Send(Destination, Destination.Length);
                    }
                }
            } catch { KVI.LastLog = "We hit an exception. What log? Oh dis one. Skipping..."; return; }

            Client.Close();

            KVI.LastLog = "Creating Pre-Auth Kerberos AS-REQ...";
            Destination = Keys.APReq2;
            byte[] TempBuffer = new byte[0x10];
            Array.Copy(ResponseBuff, ResponseBuff.Length - 0x10, TempBuffer, 0, 0x10);
            Array.Copy(TempBuffer, 0, Destination, 0x44, 0x10);
            Array.Copy(ClientName, 0, Destination, 0x11E, 0x18);
            Array.Copy(SourceArray, 0, Destination, 0x24, 20);
            TimeStamp = GenerateTimeStamp();
            Array.Copy(RC4HMACEncrypt(XMACsLogonKey, 0x10, TimeStamp, TimeStamp.Length, 1), 0, Destination, 0xCC, 0x34);

            Client = new UdpClient();
            Client.Connect("XEAS.XBOXLIVE.COM", 0x58);
            Client.Send(Destination, Destination.Length);

            KVI.LastLog = "Sending Kerberos Pre-Auth...";

            try {
                for (int i = 0; i < 2; i++) {
                    Thread.Sleep(10);
                    if (Client.Available > 0) {
                        ResponseBuff = Client.Receive(ref RemoteEP);
                        break;
                    } else {
                        if (i >= 2) {
                            KVI.LastLog = "Couldn't get response from M$! Shitting myself...";
                            return;
                        } else Client.Send(Destination, Destination.Length);
                    }
                }
            } catch { KVI.LastLog = "We hit an exception. What log? Oh dis one. Skipping..."; return; }

            Client.Close();

            KVI.LastLog = "Creating Kerberos TGS-REQ...";

            TempBuffer = new byte[210];
            Array.Copy(ResponseBuff, ResponseBuff.Length - 210, TempBuffer, 0, 210);
            byte[] DecryptedRep = RC4HMACDecrypt(XMACsLogonKey, 0x10, TempBuffer, 210, 8);
            TempBuffer = new byte[0x10];
            Array.Copy(DecryptedRep, 0x1B, TempBuffer, 0, 0x10);
            KVI.LastLog = "Setting TGS ticket...";
            byte[] ACutOfResp = new byte[0x159];
            Array.Copy(ResponseBuff, 0xA8, ACutOfResp, 0, 0x159);
            byte[] PreAuthDest = Destination;
            Destination = Keys.TGSReq;
            Array.Copy(ACutOfResp, 0, Destination, 0x1B5, 0x159);
            byte[] Authenticator = Keys.Authenticator;

            Array.Copy(ResponseBuff, 0, Authenticator, 40, 15);
            Array.Copy(Encoding.ASCII.GetBytes(DateTime.Now.ToUniversalTime().ToString("yyyyMMddHHmmssZ")), 0, Authenticator, 0x6D, 15);
            Array.Copy(MD5.Create().ComputeHash(Destination, 0x3BA, 0x4B), 0, Authenticator, 0x37, 150);
            Array.Copy(RC4HMACEncrypt(TempBuffer, 0x10, Authenticator, Authenticator.Length, 7), 0, Destination, 0x31F, 0x99);

            byte[] Noonce = ComputeKdcNoonce(TempBuffer, 0x10);

            Array.Copy(RC4HMACEncrypt(Noonce, 0x10, Keys.ServiceReq, Keys.ServiceReq.Length, 0x4B1), 0, Destination, 0x37, 150);

            byte[] TitleAuthData = new byte[0x42];
            Array.Copy(PreAuthDest, 0x74, TitleAuthData, 0, 0x42);
            Array.Copy(GetTitleAuthData(TempBuffer, 0x10, TitleAuthData), 0, Destination, 0xDD, 0x52);

            Client = new UdpClient();
            Client.Connect("XETGS.XBOXLIVE.COM", 0x58);
            Client.Send(Destination, Destination.Length);

            KVI.LastLog = "Sending TGS-REQ";

            try {
                for (int i = 0; i < 2; i++) {
                    Thread.Sleep(10);
                    if (Client.Available > 0) {
                        ResponseBuff = Client.Receive(ref RemoteEP);
                        break;
                    } else {
                        if (i >= 2) {
                            KVI.LastLog = "Couldn't get response from M$! Shitting myself...";
                            return;
                        } else Client.Send(Destination, Destination.Length);
                    }
                }
            } catch { KVI.LastLog = "We hit an exception. What log? Oh dis one. Skipping..."; return; }

            KVI.LastLog = "Decrypting logon status...";

            byte[] EncryptedLogonStatus = new byte[0x54];
            Array.Copy(ResponseBuff, 50, EncryptedLogonStatus, 0, 0x54);
            byte[] DecryptedLogonStatus = RC4HMACDecrypt(TempBuffer, 0x10, EncryptedLogonStatus, 0x54, 0x4B2);
            uint ZStatus = BitConverter.ToUInt32(DecryptedLogonStatus, 8);
            KVI.LastLog = "ZStatus: " + ZStatus.ToString("X2");

            switch (ZStatus) {
                case 0x8015190D: // Banned
                    KVI.Banned = true;
                    KVI.ZStatus = "Banned";
                    return;
                case 0x80150000:
                    KVI.ZStatus = "Error";
                    break;
                case 0x80151907: // Unknown
                    KVI.ZStatus = "Unknown Error";
                    break;
                case 0x80151904: // NODNS
                    KVI.ZStatus = "No DNS";
                    break;
                case 0x80151007: // Update Required
                    KVI.ZStatus = "Update Required";
                    break;
                default:
                    KVI.ZStatus = "Unknown ZStatus: " + ZStatus.ToString("X2");
                    break;
            } KVI.Banned = false;
        }

        private byte[] GetXMACsLogonKey(KVInfo KVI)
        {
            RSACryptoServiceProvider Provider = LoadXMACs();
            byte[] TimeTick = new byte[0x10];
            new Random(Environment.TickCount).NextBytes(TimeTick);

            byte[] EncryptedTick = Provider.Encrypt(TimeTick, true);
            Array.Reverse(EncryptedTick);

            byte[] DestBuffer = Keys.XMACS_REQ;
            Array.Copy(EncryptedTick, 0, DestBuffer, 0x2C, 0x100);
            byte[] InputBuffer = FileEx.ReadBytes(KVI.Location, 0xB0, 12);
            byte[] Source = FileEx.ReadBytes(KVI.Location, 0x9C8, 0x1A8);
            byte[] Exponent = FileEx.ReadBytes(KVI.Location, 0x29C, 4);
            byte[] KeyParams = FileEx.ReadBytes(KVI.Location, 0x2A8, 0x1C0);
            byte[] ConsoleID = FileEx.ReadBytes(KVI.Location, 0x9CA, 5);
            byte[] ClientName = ComputeClientName(ConsoleID);
            byte[] UTCTime = BitConverter.GetBytes(DateTime.UtcNow.ToFileTime());
            Array.Reverse(UTCTime);

            KVI.Serial = Conversion.BytesToHexString(ConsoleID);

            byte[] TimeStamp = Conversion.HexStringToBytes("301aa011180f32303132313231323139303533305aa10502030b3543");
            Array.Copy(Encoding.ASCII.GetBytes(DateTime.Now.ToUniversalTime().ToString("yyyyMMddHHmmssZ")), 0, TimeStamp, 6, 15);

            byte[] EncryptedHMAC = RC4HMACEncrypt(TimeTick, 0x10, TimeStamp, TimeStamp.Length, 1);
            byte[] TickChecksum = SHA1.Create().ComputeHash(TimeTick);

            SHA1CryptoServiceProvider SHAProvider = new SHA1CryptoServiceProvider();
            SHAProvider.TransformBlock(TimeTick, 0, 8, null, 0);
            SHAProvider.TransformBlock(InputBuffer, 0, 12, null, 0);
            SHAProvider.TransformFinalBlock(TickChecksum, 0, 20);
            byte[] HeaderChecksum = SHAProvider.Hash;

            RSACryptoServiceProvider Key = LoadConsolePrivateKey(Exponent, KeyParams);
            RSAPKCS1SignatureFormatter Formatter = new RSAPKCS1SignatureFormatter(Key);
            Formatter.SetHashAlgorithm("SHA1");
            byte[] Signature = Formatter.CreateSignature(HeaderChecksum);
            Array.Reverse(Signature);
            // Build the final packet
            Array.Copy(TimeTick, 0, DestBuffer, 300, 8);
            Array.Copy(InputBuffer, 0, DestBuffer, 0x134, 12);
            Array.Copy(Signature, 0, DestBuffer, 320, 0x80);
            Array.Copy(Source, 0, DestBuffer, 0x1C0, 0x1A8);
            Array.Copy(EncryptedHMAC, 0, DestBuffer, 0x3E0, 0x34);
            Array.Copy(ClientName, 0, DestBuffer, 0x430, 15);
            // Connect and send packet
            UdpClient XEAS = new UdpClient();
            XEAS.Connect("XEAS.XBOXLIVE.COM", 0x58);
            XEAS.Send(DestBuffer, DestBuffer.Length);
            IPEndPoint RemoteEP = new IPEndPoint(0L, 0);
            int Wait = 0;

            while (true) {
                try {
                    Thread.Sleep(10);
                    if (XEAS.Available > 0) {
                        byte[] RecBuffer = XEAS.Receive(ref RemoteEP);
                        byte[] Buffer = new byte[0x6C];
                        Array.Copy(RecBuffer, 0x35, Buffer, 0, 0x6C);
                        byte[] DecryptNoonce = RC4HMACDecrypt(ComputeKdcNoonce(TimeTick, 0x10), 0x10, RecBuffer, 0x6C, 0x4B3);
                        byte[] SecondaryBuffer = new byte[0x10];
                        Array.Copy(DecryptNoonce, 0x4C, SecondaryBuffer, 0, 0x10);
                        return SecondaryBuffer;
                    } Thread.Sleep(500);

                    if (Wait++ == 10)
                        return null;
                } catch { }
            }
        }

        private RSACryptoServiceProvider LoadXMACs() // Finished
        {
            EndianIO mainIO = new EndianIO(Keys.XMACS_RSA_PUB2048, EndianStyle.BigEndian) { Position = 4L };
            byte[] Exponent = mainIO.Reader.ReadBytes(4);
            mainIO.Position = 0x10L;
            byte[] Modulus = Reverse8(mainIO.Reader.ReadBytes(0x100));
            RSAParameters parms = new RSAParameters { Exponent = Exponent, Modulus = Modulus };
            RSACryptoServiceProvider Provider = new RSACryptoServiceProvider();
            Provider.ImportParameters(parms);
            return Provider;
        }

        // Untouched functions
        private byte[] GenerateTimeStamp()
        {
            byte[] destinationArray = Conversion.HexStringToBytes("301aa011180f32303132313231323139303533305aa10502030b3543");
            Array.Copy(Encoding.ASCII.GetBytes(DateTime.Now.ToUniversalTime().ToString("yyyyMMddHHmmssZ")), 0, destinationArray, 6, 15);
            return destinationArray;
        }

        private byte[] Reverse8(byte[] input)
        {
            byte[] buffer = new byte[input.Length];
            int num = input.Length - 8;
            int num2 = 0;
            for (int i = 0; i < (input.Length / 8); i++) {
                for (int j = 0; j < 8; j++)
                    buffer[num2 + j] = input[num + j];
                num -= 8;
                num2 += 8;
            } return buffer;
        }

        private byte[] ComputeClientName(byte[] ConsoleId)
        {
            int num2;
            long num = 0L;
            for (num2 = 0; num2 < 5; num2++) {
                num |= ConsoleId[num2];
                num = num << 8;
            }
            num = num >> 8;
            string s = string.Format("XE.{0}{1}@xbox.com", (num >> 4).ToString(), (((int)num) & 15).ToString());
            if (s.Length != 0x18) {
                int length = s.Length;
                for (num2 = 0; num2 < (0x18 - (s.Length - 1)); num2++)
                    s = s.Insert(3, "0");
            } return Encoding.ASCII.GetBytes(s);
        }

        private byte[] GetTitleAuthData(byte[] Key, int keyLen, byte[] titleData)
        {
            byte[] sourceArray = new HMACSHA1(ComputeKdcNoonce(Key, 0x10)).ComputeHash(titleData, 0, 0x42);
            byte[] destinationArray = new byte[0x52];
            Array.Copy(sourceArray, destinationArray, 0x10);
            Array.Copy(titleData, 0, destinationArray, 0x10, 0x42);
            return destinationArray;
        }

        private byte[] ComputeKdcNoonce(byte[] Key, int keyLen)
        {
            byte[] buffer = new byte[] { 0x73, 0x69, 0x67, 110, 0x61, 0x74, 0x75, 0x72, 0x65, 0x6b, 0x65, 0x79, 0 };
            byte[] key = new HMACMD5(Key).ComputeHash(buffer, 0, 13);
            byte[] buffer8 = new byte[4];
            byte[] inputBuffer = buffer8;
            buffer8 = new byte[4];
            buffer8[0] = 2;
            buffer8[1] = 4;
            byte[] buffer4 = buffer8;
            MD5 md = new MD5CryptoServiceProvider();
            md.TransformBlock(buffer4, 0, 4, null, 0);
            md.TransformFinalBlock(inputBuffer, 0, 4);
            byte[] hash = md.Hash;
            HMACMD5 hmacmd2 = new HMACMD5(key);
            return hmacmd2.ComputeHash(hash);
        }

        private RSACryptoServiceProvider LoadConsolePrivateKey(byte[] Exponent, byte[] KeyParams)
        {
            EndianIO nio = new EndianIO(KeyParams, EndianStyle.BigEndian);
            byte[] buffer = Reverse8(nio.Reader.ReadBytes(0x80));
            byte[] buffer2 = Reverse8(nio.Reader.ReadBytes(0x40));
            byte[] buffer3 = Reverse8(nio.Reader.ReadBytes(0x40));
            byte[] buffer4 = Reverse8(nio.Reader.ReadBytes(0x40));
            byte[] buffer5 = Reverse8(nio.Reader.ReadBytes(0x40));
            byte[] buffer6 = Reverse8(nio.Reader.ReadBytes(0x40));
            RSAParameters parameters = new RSAParameters
            {
                Exponent = Exponent,
                Modulus = buffer,
                P = buffer2,
                Q = buffer3,
                DP = buffer4,
                DQ = buffer5,
                InverseQ = buffer6,
                D = new byte[0x80]
            };
            new Random(Environment.TickCount).NextBytes(parameters.D);
            RSACryptoServiceProvider provider = new RSACryptoServiceProvider();
            provider.ImportParameters(parameters);
            return provider;
        }

        private byte[] RC4HMACEncrypt(byte[] key, int keyLen, byte[] data, int dataLen, int Idk)
        {
            HMACMD5 hmacmd = new HMACMD5(key);
            byte[] bytes = BitConverter.GetBytes(Idk);
            byte[] buffer2 = hmacmd.ComputeHash(bytes, 0, 4);
            byte[] sourceArray = Conversion.HexStringToBytes("9b6bfacb5c488190");
            byte[] destinationArray = new byte[data.Length + 8];
            Array.Copy(sourceArray, destinationArray, 8);
            Array.Copy(data, 0, destinationArray, 8, data.Length);
            hmacmd.Key = buffer2;
            byte[] buffer = hmacmd.ComputeHash(destinationArray);
            byte[] buffer6 = hmacmd.ComputeHash(buffer);
            RC4ex.RC4(ref destinationArray, buffer6);
            byte[] buffer7 = new byte[dataLen + 0x18];
            Array.Copy(buffer, 0, buffer7, 0, 0x10);
            Array.Copy(destinationArray, 0, buffer7, 0x10, destinationArray.Length);
            return buffer7;
        }

        private byte[] RC4HMACDecrypt(byte[] key, int keyLen, byte[] data, int dataLen, int Idk)
        {
            HMACMD5 hmacmd = new HMACMD5(key);
            byte[] bytes = BitConverter.GetBytes(Idk);
            byte[] buffer2 = hmacmd.ComputeHash(bytes, 0, 4);
            byte[] destinationArray = new byte[0x10];
            Array.Copy(data, destinationArray, 0x10);
            byte[] buffer4 = new byte[data.Length - 0x10];
            Array.Copy(data, 0x10, buffer4, 0, data.Length - 0x10);
            hmacmd.Key = buffer2;
            byte[] buffer5 = hmacmd.ComputeHash(destinationArray);
            RC4ex.RC4(ref buffer4, buffer5);
            return buffer4;
        }
    }
}
